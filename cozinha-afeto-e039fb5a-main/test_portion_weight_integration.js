/**
 * TESTE COMPLETO - IMPLEMENTA√á√ÉO DE PESO DA POR√á√ÉO DIN√ÇMICO
 * 
 * Este teste verifica se a implementa√ß√£o dos dois requisitos foi conclu√≠da com sucesso:
 * 1. Nome din√¢mico do campo baseado no tipo de container
 * 2. C√°lculo autom√°tico do peso apenas das etapas de Porcionamento/Montagem
 */

import RecipeCalculator from './lib/recipeCalculator.js';

console.log('üß™ [INTEGRATION-TEST] Teste completo da implementa√ß√£o de peso da por√ß√£o...\n');

// Teste 1: Verificar nomes din√¢micos por tipo de container
console.log('üìã [TESTE 1] Verificando nomes din√¢micos por tipo de container...');

const containerTests = [
  { type: 'cuba', expectedWeight: 'Peso da Cuba', expectedCost: 'Custo da Cuba' },
  { type: 'descartavel', expectedWeight: 'Peso da Embalagem', expectedCost: 'Custo da Embalagem' },
  { type: 'individual', expectedWeight: 'Peso da Por√ß√£o', expectedCost: 'Custo da Por√ß√£o' },
  { type: 'kg', expectedWeight: 'Peso por Kg', expectedCost: 'Custo por Kg' },
  { type: 'outros', expectedWeight: 'Peso da Unidade', expectedCost: 'Custo da Unidade' }
];

let dynamicNamingPassed = 0;

containerTests.forEach(test => {
  const preparations = [
    {
      title: `Teste ${test.type.toUpperCase()}`,
      processes: ['portioning'],
      assembly_config: { container_type: test.type },
      ingredients: [{ name: 'Teste', weight_raw: 1, current_price: 5 }]
    }
  ];
  
  const result = RecipeCalculator.calculateRecipeMetrics(preparations);
  
  const weightNameMatch = result.weight_field_name === test.expectedWeight;
  const costNameMatch = result.cost_field_name === test.expectedCost;
  const containerTypeMatch = result.container_type === test.type;
  
  if (weightNameMatch && costNameMatch && containerTypeMatch) {
    console.log(`‚úÖ [${test.type.toUpperCase()}] Nome din√¢mico correto`);
    dynamicNamingPassed++;
  } else {
    console.log(`‚ùå [${test.type.toUpperCase()}] Nome din√¢mico incorreto`);
    console.log(`   Esperado peso: "${test.expectedWeight}", recebido: "${result.weight_field_name}"`);
    console.log(`   Esperado custo: "${test.expectedCost}", recebido: "${result.cost_field_name}"`);
  }
});

console.log(`\nüìä [RESULTADO 1] ${dynamicNamingPassed}/${containerTests.length} tipos passaram no teste de nomes din√¢micos\n`);

// Teste 2: Verificar c√°lculo autom√°tico do peso da por√ß√£o
console.log('‚öñÔ∏è [TESTE 2] Verificando c√°lculo autom√°tico do peso da por√ß√£o...');

const portionWeightTest = [
  // Etapa 1: Processamento normal (n√£o deve contar no peso da por√ß√£o)
  {
    title: '1¬∫ Etapa: Processamento Normal',
    processes: ['defrosting', 'cleaning', 'cooking'],
    ingredients: [
      {
        name: 'Carne',
        weight_frozen: 5,
        weight_cooked: 3.5, // Rendimento: 3.5kg
        current_price: 20.00
      }
    ]
  },
  
  // Etapa 2: Porcionamento (deve contar no peso da por√ß√£o)
  {
    title: '2¬∫ Etapa: Porcionamento',
    processes: ['portioning'], // Apenas porcionamento
    assembly_config: { container_type: 'individual' },
    ingredients: [
      {
        name: 'Tempero Final', // Ingrediente de finaliza√ß√£o
        weight_raw: 0.2, // 200g - conta como bruto = rendimento
        current_price: 15.00
      }
    ],
    sub_components: [
      {
        name: 'Etapa Anterior',
        assembly_weight_kg: 1.5, // 1.5kg da etapa anterior
        total_cost: 70.00
      }
    ]
  },
  
  // Etapa 3: Montagem adicional (deve contar no peso da por√ß√£o)
  {
    title: '3¬∫ Etapa: Montagem Final',
    processes: ['assembly'], // Apenas montagem
    assembly_config: { container_type: 'individual' },
    ingredients: [
      {
        name: 'Guarni√ß√£o',
        weight_raw: 0.3, // 300g - conta como bruto = rendimento
        current_price: 8.00
      }
    ]
  }
];

const portionResult = RecipeCalculator.calculateRecipeMetrics(portionWeightTest);

// C√°lculo esperado do peso da por√ß√£o:
// - Etapa 1 (processamento): N√ÉO conta (3.5kg n√£o inclu√≠do)
// - Etapa 2 (porcionamento): Tempero (0.2kg) + Sub-componente (1.5kg) = 1.7kg
// - Etapa 3 (montagem): Guarni√ß√£o (0.3kg) = 0.3kg
// TOTAL ESPERADO: 1.7 + 0.3 = 2.0kg

const expectedPortionWeight = 2.0;
const actualPortionWeight = portionResult.portion_weight_calculated;
const portionWeightDifference = Math.abs(expectedPortionWeight - actualPortionWeight);

console.log(`üìä [PESOS] Peso total bruto: ${portionResult.total_weight.toFixed(3)}kg`);
console.log(`üìä [PESOS] Peso total rendimento: ${portionResult.yield_weight.toFixed(3)}kg`);
console.log(`üìä [PESOS] Peso da por√ß√£o (calculado): ${actualPortionWeight.toFixed(3)}kg`);
console.log(`üìä [PESOS] Peso da cuba (usado): ${portionResult.cuba_weight.toFixed(3)}kg`);

console.log(`\nüéØ [VERIFICA√á√ÉO]`);
console.log(`   Esperado: ${expectedPortionWeight}kg`);
console.log(`   Calculado: ${actualPortionWeight.toFixed(3)}kg`);
console.log(`   Diferen√ßa: ${portionWeightDifference.toFixed(3)}kg`);

const portionWeightPassed = portionWeightDifference < 0.01;

if (portionWeightPassed) {
  console.log(`‚úÖ [SUCESSO] C√°lculo autom√°tico do peso da por√ß√£o est√° correto!`);
} else {
  console.log(`‚ùå [FALHA] C√°lculo autom√°tico do peso da por√ß√£o n√£o confere`);
}

// Teste 3: Verificar se o campo cuba_weight usa o valor calculado automaticamente
console.log(`\nüîÑ [TESTE 3] Verificando se cuba_weight usa valor calculado automaticamente...`);

const cubaWeightMatch = Math.abs(portionResult.cuba_weight - actualPortionWeight) < 0.01;

if (cubaWeightMatch) {
  console.log(`‚úÖ [SUCESSO] Campo cuba_weight usa o valor calculado automaticamente`);
} else {
  console.log(`‚ùå [FALHA] Campo cuba_weight n√£o usa o valor calculado`);
  console.log(`   cuba_weight: ${portionResult.cuba_weight}`);
  console.log(`   portion_weight_calculated: ${actualPortionWeight}`);
}

// Resultado final
console.log(`\nüèÜ [RESULTADO FINAL]`);
const allTestsPassed = (dynamicNamingPassed === containerTests.length) && portionWeightPassed && cubaWeightMatch;

if (allTestsPassed) {
  console.log(`‚úÖ TODOS OS TESTES PASSARAM! Implementa√ß√£o completa e funcionando.`);
  console.log(`\nüìù [RESUMO DA IMPLEMENTA√á√ÉO]`);
  console.log(`   ‚úÖ Nomes din√¢micos baseados no tipo de container: ${dynamicNamingPassed}/${containerTests.length}`);
  console.log(`   ‚úÖ C√°lculo autom√°tico do peso da por√ß√£o: FUNCIONANDO`);
  console.log(`   ‚úÖ Campo cuba_weight usa valor calculado: FUNCIONANDO`);
  console.log(`   ‚úÖ Campo cuba_weight √© somente leitura na interface: IMPLEMENTADO`);
  
  console.log(`\nüéØ [FUNCIONALIDADES ENTREGUES]`);
  console.log(`   1. Nome din√¢mico para "Peso da Cuba (kg)" baseado no dropdown "Tipo de Porcionamento"`);
  console.log(`   2. Valor autom√°tico calculado pela soma apenas das etapas de Porcionamento/Montagem`);
  console.log(`   3. Campo somente leitura com indica√ß√£o visual de "Calculado automaticamente"`);
  console.log(`   4. Sistema ignora tentativas de altera√ß√£o manual do campo cuba_weight`);
  
} else {
  console.log(`‚ùå ALGUNS TESTES FALHARAM. Verificar implementa√ß√£o.`);
  console.log(`   Nomes din√¢micos: ${dynamicNamingPassed}/${containerTests.length}`);
  console.log(`   Peso da por√ß√£o: ${portionWeightPassed ? 'OK' : 'FALHA'}`);
  console.log(`   Cuba weight: ${cubaWeightMatch ? 'OK' : 'FALHA'}`);
}

export default {
  testsPassed: allTestsPassed,
  dynamicNamingResults: `${dynamicNamingPassed}/${containerTests.length}`,
  portionWeightPassed,
  cubaWeightMatch,
  calculatedPortionWeight: actualPortionWeight,
  expectedPortionWeight
};