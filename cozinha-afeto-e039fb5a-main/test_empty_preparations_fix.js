/**
 * TESTE - CORRE√á√ÉO DOS VALORES SEM PROCESSOS
 * 
 * Este teste verifica se o problema de valores n√£o zerados quando
 * n√£o h√° prepara√ß√µes foi resolvido.
 */

import RecipeCalculator from './lib/recipeCalculator.js';

console.log('üß™ [EMPTY-PREPARATIONS-TEST] Testando corre√ß√£o de valores sem processos...\n');

// Simular dados com valores antigos (como no cen√°rio real)
const recipeDataWithOldValues = {
  name: 'Abacate',
  name_complement: 'qwdqdq',
  category: 'Carnes',
  prep_time: 30,
  total_weight: 15.5,      // Valor antigo
  yield_weight: 12.0,      // Valor antigo (problema reportado)
  cuba_weight: 3.0,        // Valor antigo (problema reportado)
  total_cost: 85.50,       // Valor antigo
  cost_per_kg_raw: 5.52,   // Valor antigo
  cost_per_kg_yield: 7.125 // Valor antigo
};

console.log('üìã [CEN√ÅRIO] Dados antigos simulados:');
console.log('- total_weight:', recipeDataWithOldValues.total_weight);
console.log('- yield_weight:', recipeDataWithOldValues.yield_weight, '‚Üê PROBLEMA');
console.log('- cuba_weight:', recipeDataWithOldValues.cuba_weight, '‚Üê PROBLEMA');
console.log('- total_cost:', recipeDataWithOldValues.total_cost);

// Simular chamada do rec√°lculo com prepara√ß√µes vazias (cen√°rio sem processos)
console.log('\nüîÑ [REC√ÅLCULO] Recalculando com prepara√ß√µes vazias...');

const emptyPreparations = [];

// Simular l√≥gica do componente RecipeTechnical
function simulateRecalculate(preparationsData, currentRecipeData) {
  console.log('üü¢ [RECIPE-CALC] ==================== RECALCULAR M√âTRICAS ====================');
  console.log('üü¢ [RECIPE-CALC] Dados de entrada:', {
    preparationsCount: preparationsData?.length || 0,
    currentMetrics: {
      total_weight: currentRecipeData.total_weight,
      yield_weight: currentRecipeData.yield_weight,
      total_cost: currentRecipeData.total_cost,
      cuba_weight: currentRecipeData.cuba_weight
    }
  });

  // Se n√£o h√° prepara√ß√µes, zerar as m√©tricas
  if (!preparationsData || preparationsData.length === 0) {
    console.log('üî¥ [RECIPE-CALC] Nenhuma prepara√ß√£o encontrada, zerando m√©tricas');
    
    const hasCurrentMetrics = 
      (currentRecipeData.total_weight || 0) > 0 ||
      (currentRecipeData.total_cost || 0) > 0 ||
      (currentRecipeData.cost_per_kg_raw || 0) > 0 ||
      (currentRecipeData.cost_per_kg_yield || 0) > 0 ||
      (currentRecipeData.yield_weight || 0) > 0 ||
      (currentRecipeData.cuba_weight || 0) > 0;

    console.log('üü° [RECIPE-CALC] Tem m√©tricas atuais para limpar:', hasCurrentMetrics);

    if (hasCurrentMetrics) {
      // Aplicar limpeza (simulando setRecipeData)
      const cleanedData = {
        ...currentRecipeData,
        total_weight: 0,
        total_cost: 0,
        cost_per_kg_raw: 0,
        cost_per_kg_yield: 0,
        yield_weight: 0,
        cuba_weight: 0, // Corre√ß√£o aplicada
        weight_field_name: 'Peso da Cuba',
        cost_field_name: 'Custo da Cuba'
      };
      
      console.log('‚úÖ [RECIPE-CALC] M√©tricas limpas com sucesso');
      return cleanedData;
    }
  }

  // Se chegou aqui, usar c√°lculo normal
  const result = RecipeCalculator.calculateRecipeMetrics(preparationsData, currentRecipeData);
  return { ...currentRecipeData, ...result };
}

// Executar teste
const result = simulateRecalculate(emptyPreparations, recipeDataWithOldValues);

console.log('\nüìä [RESULTADO] Valores ap√≥s corre√ß√£o:');
console.log('- total_weight:', result.total_weight, result.total_weight === 0 ? '‚úÖ' : '‚ùå');
console.log('- yield_weight:', result.yield_weight, result.yield_weight === 0 ? '‚úÖ' : '‚ùå');
console.log('- cuba_weight:', result.cuba_weight, result.cuba_weight === 0 ? '‚úÖ' : '‚ùå');
console.log('- total_cost:', result.total_cost, result.total_cost === 0 ? '‚úÖ' : '‚ùå');
console.log('- cost_per_kg_raw:', result.cost_per_kg_raw, result.cost_per_kg_raw === 0 ? '‚úÖ' : '‚ùå');
console.log('- cost_per_kg_yield:', result.cost_per_kg_yield, result.cost_per_kg_yield === 0 ? '‚úÖ' : '‚ùå');

// Verifica√ß√µes
const allValuesZeroed = 
  result.total_weight === 0 &&
  result.yield_weight === 0 &&
  result.cuba_weight === 0 &&
  result.total_cost === 0 &&
  result.cost_per_kg_raw === 0 &&
  result.cost_per_kg_yield === 0;

console.log('\nüéØ [VERIFICA√á√ÉO FINAL]');
if (allValuesZeroed) {
  console.log('‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!');
  console.log('   Todos os valores foram zerados quando n√£o h√° prepara√ß√µes.');
  console.log('   Problema do "yield_weight: 12,000" e "cuba_weight: 3,000" resolvido.');
} else {
  console.log('‚ùå CORRE√á√ÉO N√ÉO FUNCIONOU COMPLETAMENTE');
  console.log('   Alguns valores ainda n√£o foram zerados.');
}

console.log('\nüìù [CORRE√á√ÉO APLICADA]');
console.log('1. ‚úÖ Adicionado cuba_weight: 0 na limpeza de m√©tricas');
console.log('2. ‚úÖ Adicionado cuba_weight na verifica√ß√£o hasCurrentMetrics');
console.log('3. ‚úÖ Adicionado yield_weight na verifica√ß√£o hasCurrentMetrics');

export default {
  testPassed: allValuesZeroed,
  before: recipeDataWithOldValues,
  after: result
};